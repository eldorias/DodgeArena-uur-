<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_disc</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grav=0.5
hsp=0
vsp=0
jumpspeed=8
movespeed=4
airjump=1
vsp_past=0
jump_key_pressure=1
left_acc=1
right_acc=1
image_multiplier=0.5

//slope 
//anglerem = 100;
//pathclear = 0; 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>object_hitbox</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vsp_past=vsp

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Sol/sağ ve yukarı tuş değişkenleri
key_right=keyboard_check(vk_right)
key_left=-keyboard_check(vk_left)
key_up=keyboard_check_pressed(vk_up)

//Yukarı tuşuna basma süresine göre zıplama yüksekliğini değiştiren kod
if (keyboard_check(vk_up)) jump_key_pressure=jump_key_pressure+0.5
if (jump_key_pressure&gt;=3) jump_key_pressure=3
if keyboard_check_released(vk_up) jump_key_pressure=0.5

//Sağ-sol tuşlarına uzun süre basınca hızı arttıran kod
if (keyboard_check(vk_left)) &amp;&amp; x_past&gt;x left_acc=left_acc+0.02
if (left_acc&gt;=1.8) left_acc=1.8
if (keyboard_check_released(vk_left))||(keyboard_check(vk_right))left_acc=1

if (keyboard_check(vk_right)) &amp;&amp; x_past&lt;x right_acc=right_acc+0.02
if (right_acc&gt;=1.8) right_acc=1.8
if (keyboard_check_released(vk_right))||(keyboard_check(vk_left))right_acc=1

move=key_left+key_right

//Slope check
/*
if sign(move)=0 dir =0
if sign(move)&gt;0 dir =1
if sign(move)&lt;0 dir=-1
anglesweep = -90+40*dir; 


while (anglerem &gt;= 0 &amp;&amp; pathclear = 0){
      anglesweep += 5*dir; 
      anglerem -= 5;
      groundspotx = x+lengthdir_x(movespeed,anglesweep)
      groundspoty = y+lengthdir_y(movespeed,anglesweep)
      pathclear = 1 
      }

   if (pathclear == 1 &amp;&amp; !place_free(x,y+1)){
  // First, change the character's X and Y coordinates to the destination.
   x+=lengthdir_x(movespeed,anglesweep)
   y+=lengthdir_y(movespeed,anglesweep)
   move_contact_solid(270,15) // This will drop the character to contact with the ground if he ended up a few pixels above it.
   vspeed = 0 // Not required, but useful at times.
   hspeed = 0   
}
// If we failed the "path clear" test, we check to see if we're airborne. If so, we just move right/left in midair.
else if place_free(x+lengthdir_x(movespeed, 90-90*dir), y)
     x += dir*max(movespeed-abs(hspeed), 0)
// Last if we aren't airborne and have no clear path to walk, we'll just move to contact the closest solid obstacle.
else{
     move_contact_solid(90-90*dir, max(movespeed-abs(hspeed), 0))
     movingleft = 0
     movingright = 0
}
     
*/
//slope end   
   
    
      
if (move=0)
{
     image_multiplier=0.5
}
else
{
     image_multilier=move
}
if (move&lt;0) sprite_index=sprite_disc
if (move&gt;0) sprite_index=sprite_disc_reverse
hsp=move*movespeed*left_acc*right_acc
image_speed=image_multiplier*left_acc*right_acc
x_past=x
//Yerçekimi ivmesini sınırlandıran kod
if (vsp&lt;10) vsp=vsp+grav/jump_key_pressure


//yerdeyken zıplama
if (place_meeting(x,y+1,object_ground_tile))
{
    vsp=key_up*(-jumpspeed)
}

//double jump check
if  keyboard_check_pressed(vk_up) &amp;&amp; airjump=1
{
    vsp=key_up*(-jumpspeed)
    airjump=0
}


//Nesnenin tam köşelere denk gelince takılıp kalmasını engelleyen kod
if (place_meeting(x+hsp,y,object_ground_tile)) &amp;&amp; (place_meeting(x,y+vsp,object_ground_tile))
{
x=x-sign(hsp)*2
y=y-sign(vsp)*2
}

//x için collision olmadan tespit edip çarpışılacak noktaya sıfır boşluklu yaklaştıran kod
if (place_meeting(x+hsp,y,object_ground_tile))
{
    while(!place_meeting(x+sign(hsp),y,object_ground_tile))  //sign + ve - 1 veriyor
    {
        x=x+sign(hsp)
    }
    hsp=0

}

////y için collision olmadan tespit edip çarpışılacak noktaya sıfır boşluklu yaklaştıran kod
if (place_meeting(x,y+vsp,object_ground_tile))
{
    while(!place_meeting(x,y+sign(vsp),object_ground_tile))  //sign + ve - 1 veriyor
    {
        y=y+sign(vsp)
    }
    vsp=0

}

//arka arkaya sadece 2 kere zıplanabilmesine izin veren kod 
//(yere değince ve hızda ani düşüş olmuşsa izin veriyor) 
//(End Step'te vsp_past belirleniyor)
if !(abs(vsp-vsp_past)&lt;grav+0.05) &amp;&amp; (place_meeting(x,y+1,object_ground_tile)) airjump=1

//Bütün işlemler sonucunda x ve y ordinatlarının belirlenmesi
x=x+hsp
y=y+vsp


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
